#ifndef CAN_SCHEDULER_H
#define CAN_SCHEDULER_H

/** @warning  This file is autogenerated */

#include <arpa/inet.h>
#include <fcntl.h>
#include <linux/can.h>
#include <linux/can/bcm.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <atomic>
#include <string>
{% set messages = messages | list %}
class CanScheduler {
  private:
    const std::string CAN_INTERFACE_NAME = "vcan0";

    static const constexpr unsigned int FAST_CYCLE_SPEED_MS = 1U;
    static const constexpr unsigned int MEDIUM_CYCLE_SPEED_MS = 100U;
    static const constexpr unsigned int SLOW_CYCLE_SPEED_MS = 1000U;

    static const constexpr unsigned int SLOW_CYCLE_BCM_ID = 0U;
    static const constexpr unsigned int MEDIUM_CYCLE_BCM_ID = 1U;
    static const constexpr unsigned int FAST_CYCLE_BCM_ID = 2U;

    static const constexpr unsigned int NUM_FAST_CYCLE_MESSAGES = {{ message_count.fast_cycle }}U;
    static const constexpr unsigned int NUM_MEDIUM_CYCLE_MESSAGES = {{ message_count.medium_cycle }}U;
    static const constexpr unsigned int NUM_SLOW_CYCLE_MESSAGES = {{ message_count.slow_cycle }}U;
    static const constexpr unsigned int NUM_TOTAL_MESSAGES = {{ message_count.total }}U;
    static const constexpr unsigned int MAX_MESSAGE_LENGTH = 8U;

    {% set fast_message = namespace(count = 0) %}
    {%- for message in messages %}
    {%- if message.cycle == "fast" %}
    static const constexpr unsigned int FAST_{{ message.sender | upper }}_{{ message.name | upper }}_FRAME_INDEX = {{ fast_message.count }}U;
    {%- set fast_message.count = fast_message.count + 1 %}
    {%- endif %}
    {%- endfor %}

    {% set medium_message = namespace(count = 0) %}
    {%- for message in messages %}
    {%- if message.cycle == "medium" %}
    static const constexpr unsigned int MEDIUM_{{ message.sender | upper }}_{{ message.name | upper }}_FRAME_INDEX = {{ medium_message.count }}U;
    {%- set medium_message.count = medium_message.count + 1 %}
    {%- endif %}
    {%- endfor %}

    {% set slow_message = namespace(count = 0) %}
    {%- for message in messages %}
    {%- if message.cycle == "slow" %}
    static const constexpr unsigned int SLOW_{{ message.sender | upper }}_{{ message.name | upper }}_FRAME_INDEX = {{ slow_message.count }}U;
    {%- set slow_message.count = slow_message.count + 1 %}
    {%- endif %}
    {%- endfor %}

    struct {
      struct bcm_msg_head msg_head;
      struct can_frame frame[NUM_FAST_CYCLE_MESSAGES];
    } canFastCycleBCM;

    struct {
      struct bcm_msg_head msg_head;
      struct can_frame frame[NUM_MEDIUM_CYCLE_MESSAGES];
    } canMediumCycleBCM;

    struct {
      struct bcm_msg_head msg_head;
      struct can_frame frame[NUM_SLOW_CYCLE_MESSAGES];
    } canSlowCycleBCM;

    int m_bcmCanSocket;

    std::atomic<bool> m_isConnected;

  public:
    CanScheduler();

    void startCanScheduler();
    void scheduleCanMessages();

    {%- for message in messages %}
    {%- for signal in message.signals %}
    void update_{{ message.name | lower }}_{{ signal.name | lower }}(uint{{ signal.length }}_t {{ signal.name | lower }}_value);
    {%- endfor %}
    {%- endfor %}
};

#endif
